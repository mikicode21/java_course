import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {
    private final int CELL_SIZE = 20;
    private final int GRID_SIZE = 20;
    private final int SCREEN_SIZE = CELL_SIZE * GRID_SIZE;
    private final int[] x = new int[GRID_SIZE * GRID_SIZE];
    private final int[] y = new int[GRID_SIZE * GRID_SIZE];
    private int snakeLength;
    private int foodX, foodY;
    private char direction = 'R'; // 'U' - Up, 'D' - Down, 'L' - Left, 'R' - Right
    private boolean running = false;
    private Timer timer;
    private int score = 0;
    private Random random;

    public SnakeGame() {
        this.setPreferredSize(new Dimension(SCREEN_SIZE, SCREEN_SIZE));
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.addKeyListener(this);
        random = new Random();
        startGame();
    }

    private void startGame() {
        snakeLength = 3;
        for (int i = 0; i < snakeLength; i++) {
            x[i] = 100 - i * CELL_SIZE;
            y[i] = 100;
        }
        spawnFood();
        running = true;
        timer = new Timer(100, this);
        timer.start();
    }

    private void spawnFood() {
        foodX = random.nextInt(GRID_SIZE) * CELL_SIZE;
        foodY = random.nextInt(GRID_SIZE) * CELL_SIZE;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (running) {
            g.setColor(Color.RED);
            g.fillOval(foodX, foodY, CELL_SIZE, CELL_SIZE);

            for (int i = 0; i < snakeLength; i++) {
                if (i == 0) {
                    g.setColor(Color.GREEN);
                } else {
                    g.setColor(Color.WHITE);
                }
                g.fillRect(x[i], y[i], CELL_SIZE, CELL_SIZE);
            }

            g.setColor(Color.WHITE);
            g.drawString("Score: " + score, 10, 20);
        } else {
            gameOver(g);
        }
    }

    private void move() {
        for (int i = snakeLength; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }

        switch (direction) {
            case 'U' -> y[0] -= CELL_SIZE;
            case 'D' -> y[0] += CELL_SIZE;
            case 'L' -> x[0] -= CELL_SIZE;
            case 'R' -> x[0] += CELL_SIZE;
        }
    }

    private void checkCollision() {
        for (int i = snakeLength; i > 0; i--) {
            if (x[0] == x[i] && y[0] == y[i]) {
                running = false;
            }
        }

        if (x[0] < 0 || x[0] >= SCREEN_SIZE || y[0] < 0 || y[0] >= SCREEN_SIZE) {
            running = false;
        }

        if (!running) {
            timer.stop();
        }
    }

    private void checkFood() {
        if (x[0] == foodX && y[0] == foodY) {
            snakeLength++;
            score++;
            spawnFood();
        }
    }

    private void gameOver(Graphics g) {
        g.setColor(Color.RED);
        g.setFont(new Font("Arial", Font.BOLD, 30));
        FontMetrics metrics = getFontMetrics(g.getFont());
        String msg = "Game Over";
        g.drawString(msg, (SCREEN_SIZE - metrics.stringWidth(msg)) / 2, SCREEN_SIZE / 2);

        g.setFont(new Font("Arial", Font.BOLD, 20));
        String restartMsg = "Press R to Restart";
        g.drawString(restartMsg, (SCREEN_SIZE - metrics.stringWidth(restartMsg)) / 2, SCREEN_SIZE / 2 + 40);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkCollision();
            checkFood();
        }
        repaint();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP -> {
                if (direction != 'D') direction = 'U';
            }
            case KeyEvent.VK_DOWN -> {
                if (direction != 'U') direction = 'D';
            }
            case KeyEvent.VK_LEFT -> {
                if (direction != 'R') direction = 'L';
            }
            case KeyEvent.VK_RIGHT -> {
                if (direction != 'L') direction = 'R';
            }
            case KeyEvent.VK_R -> restartGame();
        }
    }

    private void restartGame() {
        score = 0;
        direction = 'R';
        startGame();
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame game = new SnakeGame();
        frame.add(game);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setResizable(false);
        frame.setVisible(true);
    }
}
